#include <xc.h>
#include <pic16f886.h>
#include <stdio.h>
#include <stdlib.h>
#include "digits.h"

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT   // Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF              // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF             // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON              // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF                // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF               // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON              // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON               // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON              // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF               // Low Voltage Programming Enable bit (RB3/PGM pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V          // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF               // Flash Program Memory Self Write Enable bits (Write protection off)

// Define solenoid selection pins
#define SELECT_A PORTBbits.RB0
#define SELECT_B PORTBbits.RB1
#define SELECT_C PORTBbits.RB2

// Delay function prototype
void delay_ms(unsigned int ms);

// Function to select a solenoid
void select_solenoid(unsigned char solenoid) {
    SELECT_A = (solenoid & 0x01) >> 0;
    SELECT_B = (solenoid & 0x02) >> 1;
    SELECT_C = (solenoid & 0x04) >> 2;
    LATB ^= (1 << solenoid);  // Toggle the solenoid pin
    delay_ms(500);  // Delay for 500 ms
    LATB ^= (1 << solenoid);  // Toggle the solenoid pin again to release
    delay_ms(500);  // Delay for 500 ms
}

void main(void) {
    LATB =0x00; //PORTB Pins as 0
    OSCCON = 0x70;  // Set up internal oscillator for 8MHz operation
    ANSEL = 0x00;   // Configure all I/O pins as digital
    ANSELH = 0x00;
    TRISB = 0x00;   // Set all PORTB pins as outputs
    TRISB &= ~(1 << solenoid);  // Set solenoid pin as output

     // Configure Timer0
    OPTION_REGbits.T0CS = 0; // Timer0 clock source is the internal instruction cycle clock (Fosc/4)
    OPTION_REGbits.PSA = 0;  // Prescaler is assigned to the Timer0 module
    OPTION_REGbits.PS = 0b111; // Prescaler is 256
    TMR0 = 0;                // Clear Timer0 register
    INTCONbits.TMR0IE = 1;   // Enable Timer0 interrupt
    INTCONbits.TMR0IF = 0;   // Clear Timer0 interrupt flag
    INTCONbits.GIE = 1;      // Enable global interrupts

    while(1) {
        for (unsigned char i = 0; i < 4; i++) {
            select_solenoid(i);
            delay_ms(1500); // Delay for 1.5 seconds
        }
    }
}

// Timer0 interrupt service routine
void __interrupt() ISR(void) {
    if (INTCONbits.TMR0IF) {
        TMR0 = 0; // Reset Timer0
        LED = !LED; // Toggle LED
        INTCONbits.TMR0IF = 0; // Clear Timer0 interrupt flag
    }
}

// Delay function implementation
void delay_ms(unsigned int ms) {
    unsigned int Delay1, Delay2;
    for (Delay1 = 0; Delay1 < ms; Delay1++) {
        for (Delay2 = 0; Delay2 < 100; Delay2++);
    }   
}
